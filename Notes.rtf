{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Oblique;\f2\froman\fcharset0 Times-Roman;
\f3\fswiss\fcharset0 Helvetica-Bold;\f4\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;\red41\green48\blue59;\red236\green82\blue82;
}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c91373;\csgenericrgb\c16078\c18824\c23137;\csgenericrgb\c92549\c32157\c32157;
}
\margl1440\margr1440\vieww22720\viewh14580\viewkind1\viewscale120
\deftab720
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\ri0\partightenfactor0

\f0\fs24 \cf0 Udemy AWS Severless- API & Apps Course Notes\
\
Section 1.6 AWS Signup & First Serverless API\
- There are more advanced ways of creating APIs (e.g. by importing API definition files).\
- Mock response under the "Get" Method is a dummy response. \
- Stages are a feature which allow you to manage different versions of the API, like a development API and a production API.\
- remember to add to the end of the link. https://l3dtr5aq3b.execute-api.us-east-2.amazonaws.com/Development/first-api-udemy \
\
Section 1.7 Why AWS?\
-Alternates to AWS include Microsoft's Azure and Google Cloud Platform\
\
Section 2.12 An Overview over the Core Serverless Services\
-S3 (Simple Storage Service)\
  - doesn't support any server-side code\
-API Gateway\
  - a service to create API with different paths and HTTP methods we want to handle\
-Lambda\
  - allows you to execute code on demand\
-DynamoDB\
  - NoSQL database where we don't have to provision any database servers. \
-Cognito\
  - creates user pools to allow users to sign-up and then sign themselves in.\
-Route 53\
  - allows us to register and configure our own domain. \
-Cloud front (optional)\
  - caching service used to improve performance and delivery time \
  - basically, copy your static files to always have the quickest route possible\
\
\
Section 3.16 What is API Gateway?\
-API Gateways can create endpoints, which are combinations of resources, paths and HTTP methods so that you can get URLs.\
\
Section 3.19 General API Gateway Features\
- API keys are useful if you plan on creating an API which is shared with other developers\
- API keys are used to identify the calling program, its developer, or its user to the Web site. API keys are used to track and control how the API is being used\
- Example: if you want to use Google Maps' API, you register with Google and they will provide you an API key. With that API key, you will pass with any request to identify yourself while Google will also track your usage.\
- API Gateways allows you to individually grant API keys but you also have an automatic system where people can register for your API. \
- 
\f1\i Client Certificates
\f0\i0  are important if you plan on forwarding incoming requests to another HTTP endpoint and on that HTTP endpoint, you want to validate that the request this other HTTP endpoint gets, indeed stems from your API Gateway\
\
-IAM (Identity and Access Management)\
  - managing who can access what. Giving the right people that right services.\
\
Section 3.21 API-specific Features & Options \
- a resource, inside your API, is like a path i.e. a new path in the final URL you can use. \
- to bring API to life and expose API to the web, we always have to call deploy API. This leads to stages. Stages are like snapshots of your API, deployed snapshots. \
- 
\f1\i Models
\f0\i0  allows you to define the shape of the data you work with in your API. Models are created using the JSON schema language.\
  - You can use these models to validate incoming data, see if it fits that schema or reject it.\
- 
\f1\i Binary Support
\f0\i0  is important if you plan on sending files along with your requests\
  - to send these files unchanged to the receiving endpoint or to the code that actually handles the request, you have to register the file types.\
\
Section 3.22 Introducing the Request-Response Cycle\
- an endpoint is made up of two things:\
   - resource: the path to which the request should get sent \
   - method: the type of request\
- you can test an endpoint inside API Gateway so we don\'92t have to set up a client to do the testing\
- Method Request (the first box) defines how requests reaching this endpoint should actually look like. It\'92s like a gatekeeper that can deny/accept\
	- You can validate your request using 3 types:\
	  - URL Query String Parameters: this is the text after the ? mark at the end\
	  - HTTP Request Headers: header fits our scheme or needs\
	  - Request Body: you can connect it to a model.\
\
Section 3.23 Understanding the Request-Response Cycle\
- Integration Request: mapping or transforming incoming data (not just the body, but header or metadata like authenticated users) into a particular shape we want to use it on the action we are about to trigger.\
  - the role of the integration request is to trigger the endpoint.\
\
- integration Response: allows us to configure the response we\'92re sending back; opposite to what the integration request does. \
  - It fills that shape with life and is non-binding.\
- Method Response: defines the shape our response should have. Will never block the response because we always want to send back a response. You must first configure the headers under Method Response to be able to adjust them in the Integration Response. \
   - Method Response defines the boundaries of the set up\
\
Section 3.24 Creating a New API\
- Swagger: is a definition or language which allows you define an API as a text file then import it AWS API Gateway\
\
Section 3.25 Creating a Resource (= URL Path)\
- selecting the 
\f1\i Configure as proxy resource 
\f0\i0 means this will be a catch-all resource, catching all other paths and methods. A flexible path that could capture all requests if needed. Why do that?\
	- great for single page apps but it is limited to full-stack apps\
	- you capture all requests and send it to a Lambda function that will handle all requests (effectively creating a full-stack app with a server-less approach)\
- API Gateway CORS (Cross Origin Resource Sharing): a security model where, in general, we are not allowed to access resources on a server from another server. One server needs to send the right headers telling the browser that this cross site access is OK. \
- Modern browsers send preflight requests that check if the resource or the post request is about to get to, is actually available and/or allowed.\
	- this extra request will be of type options, HTTP verb. Therefore, you need to provide an options endpoint so that the incoming request will be handled appropriately and return the right CORs headers to tell Chrome that it is okay to send POST request 
\f1\i EVEN though we are using different resources, different servers. \
- 
\f0\i0 Integration type simply means which kind of action do you want to execute whenever a request hits this resource. \
- Selecting Integration type: HTTP means we can forward it to another API.\
- Selecting the \'93Use Lambda Proxy Integration\'94 box, means that takes the incoming request and the request\'92s metadata and pass that unfiltered data as a JSON object to the Lambda function. \
   - This also means that in the Lambda function, you will have to extract what you need and in the end you will have to send back a response from Lambda. This means you won\'92t be using the native tools API Gateway gives you, like the integration response and integration request.\
\
Section 3.31 Creating a Lambda Function\
- index.handler defines the entry point of your lambda code execution.\
  - Index.handler means whenever Lambda executes, it will not automatically run all JavaScript. Instead, it will run the file name \'93index\'94 with the function \'93handler. Basically, 
\f1\i file.function
\f0\i0 \
\
Section 3.34 Accessing the API from the Web & Fixing CORS Issues\
- It is important to test from the web (codepen.io) because CORS errors won\'92t pop up if you just test it in the API console.\
   - As how it is current set up, you will need to set up CORS headers on each method and not just on the OPTIONS method. \
\
Assignment 1 API Gateway + Lambda Basics\
- Instead of setting up the CORS headers manually by going into Method Response, then Integration Response for every single method, you can automatically set it up by selecting \'93
\f1\i Enable CORS
\f0\i0 \'94
\f1\i  
\f0\i0 under Actions.\
\
\
Section 3.35 Understanding \'93event\'94 in Lambda Functions\
- remember to enclose in parentheses the JSON properties of the Request Body\
- there are two points where you can adjust the data: Integration Request and Integration Response.\
\
Section 3.36 Forwarding Requests with \'93Proxy Integration\'94\
- Using \'93Use Lambda Proxy Integration\'94 box, sends all the data to the Lambda function instead of just the request body. \
- If you notice a section, like \'93Integration Response\'94, is grayed out then that means the data never gets to the part primarily because the request doesn\'92t fit the schema of the response.\
\
Section 3.37 Accessing Lambda Logs\
- Lambda stores its logs inside of another service called \'93Cloudwatch\'94\
- Pro for using the \'93Use Lambda Proxy Integration\'94 that returns all of the data is you get more info while the Con is that it takes a significant amount of work to access the body by Lambda that should be handled by API Gateway.\
\
Section 3.38 Getting Started with Body Mapping Templates\
- the name \'93application/json\'94 means that incoming requests with \'93Content-Type\'94 of \'93application/json\'94 will be handled by this template. \
- Integration request is where you can transform the incoming data and pass that same data in another shape.\
\
Section 3.39 Extracting Request Data with Body Mapping Templates\
- AWS API Gateway has a language (templating language) that we can use to extract data from the request, in this case body mapping templates, which you can select by selecting \'93Method Request passthrough\'94 (uses Apache\'92s Velocity language). There is official documentation\
- this allows to you to not forward the entire request but a forwarding a mapped template (or a mapped event data object) with data from the request. In short, it simply allows you to control which data your action receives. \
   - the power lies in not having to parse JSON data because it is already a mapped JavaScript object instead\
   - also doesn\'92t override the Integration response. \
\
Section 3.40 What\'92s the idea behind Body Mapping\
- In the API\'92s Gateway templating language, \'93$input\'94 refers to your data. It is a reserved variable. \
- pay attention to the naming of the properties (age) that are feed into your action (Lambda function)\
\
Section 3.42 Mapping Response Data\
- \'93$input\'94 is the callback info sent back by Lambda, \'93json(\'91$\'92)\'94 then gives us back all the data passed with the callback. \
- The philosophy here is we don\'92t have to adjust our Lambda function to our client, we only have to adjust our API Gateway to our client and transform the data we get back. However, I can see instances where different clients with different necessities might need the data in a different format, so Lambda might be the place to identify that and adjust the data there. Might be possible to do it in API Gateway too.\
\
Section 3.43 Using Models & Validating Requests\
- status code 400: request is blocked\
\
Section 3.44 Understanding JSON Schemas \
- JSON schemas: {\field{\*\fldinst{HYPERLINK "http://json-schema.org/understanding-json-schema/index.html"}}{\fldrslt 
\f2 \cf2 \ul \ulc2 http://json-schema.org/understanding-json-schema/index.html}}\
\
Section 3.45 Models & Mappings\
- the whole idea of using models is optional however with API Gateway, you get an out-of-the-box working implementation of validation which returns an error if it fails. \
- you can also use models to map data apart from validation.\
- $input.path(\'91$\'92) is all the data that is returned by Lambda. \
\
Assignment 2 Models and Mapping \
- In mapping techniques, you are transforming data. In models, you are defining the structure of the data. \
\
Section 3.48 Using Path Parameters\
- Difference between path variable vs query parameters\
	- Query parameters are added to the URL after the ? mark, while a path parameter is part of the regular URL.\
	- As a best practice, almost of developers are recommending following way. If you want to identify a resource, you should use Path Variable. But if you want to sort or filter items, then you should use query parameter.\
- Instead of explicitly creating resources for each instance, you use a path variable to determine what which resource to access. Think of how this might come in handy when you want to access a particular employee\'92s info in a database for thousands of users. It would be impossible to hardcode inside of API Gateway\
- You can add path parameters using brackets. For example, the resource path \{username\} represents a path parameter called 'username'.\
	- \{parameter\}\
- API Gateway automatically detects the number of parameters. \
- The default behavior of the integration request is to pass only the request body \
   - the problem here is that the GET request doesn\'92t have a request body so the data has to be encoded in the URL\
   - that is the reason why we are using a template to identify the 
\f1\i type
\f0\i0  parameter. \
- API Gateway manages a 
\f1\i params 
\f0\i0 object where it has key-value pairs\
	- where the keys are the names we specify here between the curly braces (parameter) and \
	- the values are the actual values we then send when we replace these dynamic values with 
\f1\i real values in the URL.
\f0\i0 \
	- Example: if our URL is 
\f1\i myapi.com/\{type\}. 
\f0\i0 Then in practice we send a request 
\f1\i myapi.com/all
\f0\i0  or 
\f1\i myapi.com/single
\f0\i0 . API Gateway will extract that value (
\f1\i all 
\f0\i0 or 
\f1\i single
\f0\i0 ) and store it in this 
\f1\i params
\f0\i0  object.\
- for the response to be passed as a string, we need to enclose the value we extract from the URL in double quotation marks like so:\
	- \{ \'93type\'94: 
\f1\i \'93$input.params(\'91type\'92)\'94  
\f0\i0 \} (as an argument to params, we pass the name of the parameter.\
	- because in this case, our lambda function is comparing the value to a string. \
\
Section 3.49 What about Query Parameters?\
- you can use query parameters for validation (e.g. require certain query parameters) and that you may extract them in Body Mapping Templates.\
\
Section 3.50 Accessing the API from the Web \'96 The Right Way\
- understand the difference between JSON and JavaScript\
\
Section 3.51 Wrap Up\
- you create models with JSON schema language and \
- mapping templates with the Apache Velocity Language \
\
Section 4.53 What is Dynamo DB? (Useful in a small number of instances)\
- Dynamo DB is fully managed NoSQL database (no relations in data, the different tables stand on their own) \
	- you don\'92t have to take care about provisioning any database services\
- Why is NoSQL a great fit for server-less architecture?\
	- because it is fully managed, and you don\'92t have to spin up any database servers while for relational databases, you have to bring your own servers, how much capacity, how much CPUs and scale them up and down manually (offered by AWS, not in general)\
- the data is stored like JSON data in key-value format\
\
Section 4.55 How DynamoDB Organizes Data\
- in a table, we are always required to have a partition key then you can have as many attributes that you need.\
	- the partition key must be unique\
- Why is it named \'93partition key\'94?\
	- because DynamoDB uses a fleet of solid-state drives to store you data by efficiently partitioning these solid state drives\
- DynamoDB allows for you to use a partition and a sort key combined as a primary key\
- 
\f1\i Global Secondary Index: 
\f0\i0 to query for attributes, you must set them up explicitly and up to 5 per table\
- 
\f1\i Local Secondary Index:
\f0\i0  a combination of partition key and some other attribute \
\
Section 4.56 NoSQL vs SQL (In AWS)\
- NoSQL \
	 - No relations\
	 - No/Weak Schemas (High Flexibility)\
	 - Data Repetition\
	 - No Integrity Checks\
	 - Easy Scalability (No Servers to manage)\
\
- SQL (Relational)\
	 - Relations\
	 - Strong Schemas (Low Flexibility)\
	 - No Data Repetition\
	 - Integrity Checks\
	 - Harder Scalability \
\
Section 4.57 Using DynamoDB with Lambda\
- Dynamo DB can be both a trigger and/or as a repository Lambda works with.\
	- It can be an event source because you can configure Lambda to react to changes in the DynamoDB table. \
	- Ex. If you add a new element, then you can trigger a function in Lambda. \
\
Section 4.59 Understanding Read & Write Capacity\
- 
\f1\i Provision Capacity: 
\f0\i0 you tell DynamoDB how often you plan on reading or writing the data by provisioning certain read and write capacity units\
	- it also depends on the size of the item you\'92re reading or writing\
- make sure all the tables together are within the free tier, it\'92s not on a per table basis\
- 
\f1\i Time to live attribute
\f0\i0 : is an option that lets us define how long this data should live and when it should be deleted. \
- for throttled read or write requests, if you exceed your provision capacity, you\'92re not going to pay more, it just fails.\
\
Section 3.60 On-Demand Capacity\
- There is an \'93On-Demand mode\'94 now, that is useful if you have no idea about how much read and write capacity you\'92ll need\
\
Section 3.62 What about multiple Databases?\
- You\'92re only going to have 1 database per region\
	- you can switch region to add a new DynamoDB database but keep in mind if you create tables here, the capacity provision here will be added to the one in other regions.\
	- free tier is split up across all tables, across all regions. \
\
Section 3.63 Accessing DynamoDB from Lambda\
- AWS SDK allows you to access the different services/tools programmatically in different languages. \
	- when using it from Lambda (inside AWS), you don\'92t need to install it. You only need to install it on your machine if you plan on using the SDK from your machine. \
- understand the defaults for the \'93region\'94 parameter is 
\f1\i U.S.-East 1 
\f0\i0 \
\
Section 4.64 How Lambda works behind the scenes\
- Why is the AWS SDK DynamoDB outside the handler function?\
	- whenever a trigger occurs running your Lambda function, AWS quickly spins up a server environment. Basically, a wrapper contains your Lambda function and keeps it alive for a short period of time. Therefore, if your function executes several times during the time frame the wrapper is alive, it will reuse that wrapper (not re-execute, providing a bit of a performance edge).\
- SDK: software development kit. \
\
Section 4.65 Putting Items into a DynamoDB Table from Lambda\
- An asynchronous model allows multiple things to happen at the same time. When you start an action, your program continues to run. When the action finishes, the program is informed and gets access to the result.\
	- dynamobd.putItems is an asynchronous action\
- DynamoDB has a unique syntax that is required to add data, so you must look at the official documentation. \
	- side note: numbers are passed as a string\
- Make sure you are not calling the callback too early because of the asynchronous property\
\
Section 4.66 Setting Permission Right\
- By default, no AWS service has any permissions \
- The default roles created in AWS has a default policy that allows two things:\
	- the creation of log groups and \
	- log streams\
- we will need to add an additional policy to allow access to DynamoDB\
\
Section 4.67 Using API Gateway (Request) Data for Item Creation\
- Remember that DynamoDB Syntax 
\f3\b requires values to be in strings
\f0\b0  therefore you must convert numbers to string inside of Lambda or do the conversion in the integration request to pass to Lambda the values already as strings. \
	- the last option is easy to implement by enclosing expressions inside quotation marks.\
\
Section 4.69 Scanning Data in DynamoDB from Lambda\
- DynamoDB 
\f1\i scan()
\f0\i0  function takes conditions into account WHILST searching, 
\f1\i scan()
\f0\i0  after reading all items\
- 
\f1\i scan()
\f0\i0  function has a limitation where it can only fetch data up to 1 MB total. Therefore, if the limit is reached then the function will stop, return the current data but also store in a property called \'93LastEvaluatedKey\'94 the last key it looked at for know where to rebegin the search. \
- 
\f1\i scan() 
\f0\i0 is an asynchronous function so you shouldn\'92t immediately callback after executing 
\f1\i scan
\f0\i0  because that would finish the Lambda function before 
\f1\i scan
\f0\i0  is finished. \
\
Section 4.70 Improving the IAM Permissions\
- From a permission perspective, it is important to manage the roles that allows the interaction between DynamoDB and Lambda. \
- DynamoDB assigns a unique name to tables (resource) called the \'93Amazon Resource Name\'94 (ARN)\
\
Section 4.77 Mapping DynamoDB Response \
- As explained earlier, the method response doesn\'92t block the response just because it\'92s not fitting the model.\
- If Lambda returns a single object, then in the integration response, the loop will go through the properties versus if an array of objects is returned, then it will loop through the objects instead. \
	- to fix this, you will need to enclose the single item returned in an array.\
\
Section 5.81 Understanding Custom Authorizers (API Gateway)\
- 
\f1\i A custom authorizer
\f0\i0  tells API Gateway to call a specific lambda function, pass some information from the incoming request to that function then the function validates or identifies the user.\
	- the goal of this function is to return an IAM policy that will be temporarily be used by API Gateway and in the end, this policy simply needs to decide if you are the user sending the request, which we don\'92t know, can invoke this API endpoint.\
	- also needs to return a 
\f1\i Principal ID\

\f0\i0 - In the authentication process, we need to get an identity token. In API Gateway, the default is in the header of the request that can be anything basically.\
\
Section 5.82 Creating a Custom Authorizer Function\
- Ideally, when the authorization token is received in Lambda, we put through a more complex flow to parse it, to check if it is valid, if it is signed, if it wasn\'92t broken. \
- \'91execute-api.Invoke\'92 is the an IAM term for controlling the invocation of the API endpoints therefore it is a reserved term.\
- \'91event.methodArn\'92 is the JS way that API Gateway refers to the endpoint\
	-  "methodArn":"arn:aws:execute-api:<regionId>:<accountId>:<apiId>/<stage>/<method>/<resourcePath>"\
\
Section 5.84 MUST READ: New UI for setting up Custom Authorizers\
- 
\fs27 \cf3 There, you should just enter\'a0
\f4\fs24 \cf4 "Authorization"
\f0\fs27 \cf3 \'a0into the\'a0
\f4\fs24 \cf4 "Token Source"
\f0\fs27 \cf3 \'a0field, NOT\'a0
\f4\fs24 \cf4 method.request.headers.Authorization
\f0\fs27 \cf3 \'a0. Otherwise, you will get a 401 error.
\fs24 \cf0 \
\
Section 5.85 Using Custom Authorizers \
- If you don\'92t assign an 
\f1\i Execution role,
\f0\i0  under Custom Authorizer, API Gateway will automatically assume one which allows API Gateway to execute the function.\
- you set authentication in the 
\f1\i Authorization
\f0\i0  parameter, under the 
\f1\i Method Request.\

\f0\i0 \
\
Section 5.86 Retrieving Users from Custom Authorizers\
- to send the authenticated response (after it being vetted by the Lambda function) it will need to be sent to the body mapping template of the 
\f1\i Integration Request
\f0\i0  of the endpoint.\
- the 
\f1\i $context
\f0\i0  variable provided by API Gateway contains the 
\f1\i principalId.
\f0\i0 \
\
Section 5.87 What is AWS Cognito?\
- You can integrate AWS Cognito with Facebook or Google accounts. \
- Allows you to define authentication logic, issue tokens to apps and issue temporary IAM credentials (so you can get full or partial access depending on the roles assigned)\
\
Section 5.89 Cognito User Pools and Federated Identities\
- \'93
\f1\i Manage your User Pools\'94
\f0\i0 : is a complete solution for people with no authentication process at all and do not want to include 3\super rd\nosupersub  party providers like Facebook or Google. Basically, sign-up and sign-up\
- \'93
\f1\i Manage Federated Identities\'94
\f0\i0 : allows you to connect to 3\super rd\nosupersub  party providers and create temporary IAM credentials to issue these users with the rights of performing certain actions. \
- Using \'93Alias\'94 checkbox allows that attribute to be used instead of the default username.\
	- by using this option, it will require the attribute (e.g. email) to be unique and not have the capacity for it to be duplicated. \
- 
\f1\i tags
\f0\i0  can be added for tracking the usage of the service \
- if your JavaScript app is running in the browser then you can\'92t protect the \'93client secret\'94. Therefore, you must unselect the 
\f1\i Generate client secret\

\f0\i0 	- it would be different if you access the user pools from a back-end source. \
\
Section 5.91 Understanding the Cognito Auth Flow\
- During sign-in, the user is validated from User Pool and Cognito issues 3 tokens to our front-end application. \
	- Identity Token: is the one sent to our back-end (e.g. API Gateway) to authenticate. You can create your own authorizer to validate identity tokens, but the process is more complex therefore, you can use Cognito\'92s out-of-the-box authorizer.\
	- Access Token: can be used to change some user attributes\
	- Refresh Token: required to get new identity and access tokens. It essentially resigns without needing for the user to provide user name and password again. \
\
Section 5.92 Adding Signup to the Frontend Apps\
- the best way of using Cognito in front-end app, regardless if it is JavaScript, iOS or Android, is to use the appropriate SDK.\
\
Section 6.106 Module Introduction\
- AWS offers S3 (simple storage service) that allows us to host static files for the application. As soon as the server-side code is involved, this solution will not work. \
\
Section 6.107 What is S3?\
- In reality, S3 can store web app files like HTML, CSS, or image files but also documents, text, pdfs.\
	- you organize these files in \'93buckets\'94\
- You can configure the access level to these buckets from a permission standpoint but also how frequent you expect to access. \
\
Section 6.109 Creating a S3 Bucket\
- Whenever a \'93folder\'94 is added, it just adds a prefix to all the objects in the folder.\
	- it technically it is just one layer, one level and all objects sit in that level\
- Serverless doesn\'92t necessarily mean that there is no server involved. It means we don\'92t have to manage the capacity of the server. \
\
Section 6.114 Optimizing Content Delivery: What is AWS CloudFront?\
- CloudFront: optimizes the way our page is distributed by coping the files and storing them (or caching them) nearby for faster return. In other words, efficiently deliver your web assets (and more) across the globe.\
\
Section 6.116 Setting up a CloudFront Distribution \
- TTL (time to live): how often will CloudFront fetch a new copy. \
- The \'93
\f1\i Compress Objects Automatically
\f0\i0 \'94 means CloudFront will automatically gzip (compress them and serve them to the requesting browser while adjusting the header to inform the browser that the content is gzipped.  \
	- this great feature will further reduce the file size we\'92re serving. \
- CDN: Content Delivery Network\
\
Section 6.118 Using a Custom Domain: What is Route53?\
- Route53: AWS domain name service where you can buy domains or use one you already own and manage. You can also route traffic for your domains. \
\
Section 7.123 Module Introduction\
- if you want to expose your API, you must have good documentation as to what the API does. \
- Since Lambda is able to run NodeJS, you can actually run a NodeJS multi-page application or a full stack app\
\
Section 7.124 Documenting an API\
- You can document the different pieces of your API at a very low level to include: what kind of authorization does it use, what kinds of methods, what should you send to these methods and what will these methods return to you.\
\
Section 7.125 Other AWS Triggers\
- You can explicitly state which trigger will execute a particular function. \
- Kinesis can be used to listen to streams of incoming data. Very useful for big data analytics. \
\
Section 7.126 Going Serverless with Node/Express App (Non-API)\
- You can actually build an MPA (multi-page application) with Lambda and API Gateway for NodeJS/Express. You might do it for C# or Java but it\'92s not that well supported at this time.\
\
Section 7.128 Pros and Cons of Serverless Node/Express MPA\
- }