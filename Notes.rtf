{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww15480\viewh8320\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Udemy AWS Severless- API & Apps Course Notes\
\
Section 1.6 \
- There are more advanced ways of creating APIs (e.g. by importing API definition files).\
- Mock response under the "Get" Method is a dummy response. \
- Stages are a feature which allow you to manage different versions of the API, like a development API and a production API.\
- remember to add to the end of the link. https://l3dtr5aq3b.execute-api.us-east-2.amazonaws.com/Development/first-api-udemy \
\
Section 1.7\
-Alternates to AWS include Microsoft's Azure and Google Cloud Platform\
\
Section 2.12\
-S3 (Simple Storage Service)\
  - doesn't support any server-side code\
-API Gateway\
  - a service to create API with different paths and HTTP methods we want to handle\
-Lambda\
  - allows you to execute code on demand\
-DynamoDB\
  - NoSQL database where we don't have to provision any database servers. \
-Cognito\
  - creates user pools to allow users to sign-up and then sign themselves in.\
-Route 53\
  - allows us to register and configure our own domain. \
-Cloud front (optional)\
  - caching service used to improve performance and delivery time \
  - basically copy your static files to always have the quickest route possible\
\
\
Section 3.16\
-API Gateways can create endpoints, which are combinations of resources, paths and HTTP methods so that you can get URLs.\
\
Section 3.19\
- API keys are interesting if you plan on creating an API  which is shared with other developers\
- API keys used to identify the calling program, its developer, or its user to the Web site. API keys are used to track and control how the API is being used\
- Example: if you want to use Google Maps' API, you register with Google and they will provide you an API key. With that API key, you will pass with any request to identify yourself while Google will also track your usage.\
- API Gateways allows you to individually grant API keys but you also have an automatic system where people can register for your API. \
- 
\f1\i Client Certificates
\f0\i0  are important if you plan on forwarding incoming requests to another HTTP endpoint and on that HTTP endpoint, you want to validate that the request this other HTTP endpoint gets, indeed stems from your API Gateway\
\
-IAM (Identity and Access Management)\
  - managing who can access what. Giving the right people that right services.\
\
Section 3.21\
- a resource, inside your API, is like a path i.e. a new path in the final URL you can use. \
- to bring API to life and expose API to the web, we always have to call deploy API. This leads to stages. Stages are like snapshots of your API, deployed snapshots. \
- 
\f1\i Models
\f0\i0  allows you to define the shape of the data you work with in your API. Models are created using the JSON schema language.\
  - You can use these models to validate incoming data, see if it fits that schema or reject it.\
- 
\f1\i Binary Support
\f0\i0  is important if you plan on sending files along with your requests\
  - to send these files unchanged to the receiving endpoint or to the code that actually handles the request, you have to register the file types.\
\
Section 3.22\
- an endpoint is made up of two things:\
   - resource: the path to which the request should get sent \
   - method: the type of request\
- you can test an endpoint inside API Gateway so we don\'92t have to set up a client to do the testing\
- Method Request (the first box) defines how requests reaching this endpoint should actually look like. It\'92s like a gatekeeper that can deny/accept\
	- You can validate your request using 3 types:\
	  - URL Query String Parameters: this is the text after the ? mark at the end\
	  - HTTP Request Headers: header fits our scheme or needs\
	  - Request Body: you can connect it to a model.\
\
Section 3.23\
- Integration Request: mapping or transforming incoming data (not just the body, but header or metadata like authenticated users) into a particular shape we want to use it on the action we are about to trigger.\
  - the role of the integration request is to trigger the endpoint.\
\
- integration Response: allows us to configure the response we\'92re sending back; opposite to what the integration request does. \
  - It fills that shape with life and is non-binding.\
- Method Response: defines the shape our response should have. Will never block the response because we always want to send back a response. You must first configure the headers under Method Response to be able to adjust them in the Integration Response. \
   - Method Response defines the boundaries of the set up\
\
Section 3.24\
- Swagger: is a definition or language which allows you define an API as a text file then import it AWS API Gateway\
\
Section 3.25\
- selecting the 
\f1\i Configure as proxy resource 
\f0\i0 means this will be a catch-all resource, catching all other paths and methods. A flexible path that could capture all requests if needed. Why do that?\
   - great for single page apps but it is limited to full-stack apps\
   - you capture all requests and send it to a Lambda function that will handle all requests (effectively creating a full-stack app with a server-less approach)\
- API Gateway CORS (Cross Origin Resource Sharing): a security model where, in general, we are not allows to access resources on a server from another server.\
\
\
}